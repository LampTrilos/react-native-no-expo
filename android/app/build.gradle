//This signals it is the main application
apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.reactnativewithoutexpo"
    defaultConfig {
        applicationId "com.reactnativewithoutexpo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    //To make available the neurotec sample classes in utils folder
    //Besides this, you also need to declare it in the root settings.gradle
    implementation project(":neurotec-sample-app")
    implementation project(':passport-reader-app')

    //To make available the passport-reader-app sample classes in utils folder
    //Besides this, you also need to declare it in the root settings.gradle
    //implementation project(":passport-reader-app")
    //Libraries needed for UI of passport-reader-app that was moved to the main app
    //Camera
    implementation 'io.fotoapparat:fotoapparat:2.7.0'
    //NFC Passport
    implementation 'org.jmrtd:jmrtd:0.7.35'
    //RX
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.19'
    implementation 'net.sf.scuba:scuba-sc-android:0.0.23'
    //Input data Validator
    implementation 'com.mobsandgeeks:android-saripaar:2.0.3'
    // ML Kit dependencies
    implementation 'com.google.firebase:firebase-core:21.1.1'
    implementation 'com.google.firebase:firebase-ml-common:22.1.2'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:18.0.2'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation ('org.ejbca.cvc:cert-cvc:1.4.13'){
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
    }
    //This one was added from scratch because the CardView library was missing
    implementation 'androidx.cardview:cardview:1.0.0'
    //End of libraries needed for UI of passport-reader-app




    //To detect the neurotechnology jar in app/libs, perhaps they are not need for /app and only needed for /neurotec-sample-android
    //implementation fileTree(dir: '../libs', include: ['*.jar'])
    //implementation (name:'neurotec-biometrics-gui-android', ext:'aar')
    implementation fileTree(dir: '../libs', include: [
            'acssmc.jar',
            'androidSCardV1.2.jar',
            'jna.jar',
            'neurotec-biometrics-android.jar',
            'neurotec-biometrics-client-android.jar',
            'neurotec-core-android.jar',
            'neurotec-devices-android.jar',
            'neurotec-devices-fscanners-ekemp-android.jar',
            'neurotec-devices-fscanners-greenbit-android.jar',
            'neurotec-devices-fscanners-secugen-android.jar',
            'neurotec-devices-fscanners-suprema-biomini-android.jar',
            'neurotec-devices-media-android.jar',
            'neurotec-devices-multimodal-credenceid-android.jar',
            'neurotec-gui-android.jar',
            'neurotec-licensing-android.jar',
            'neurotec-media-android.jar',
            'neurotec-media-processing-android.jar'
            //'neurotec-licensing-gui-android.jar', //Not since we are impementing the .aar and both cant coexist
            //'neurotec-biometrics-gui-android.jar', //Not since we are impementing the .aar and both cant coexist
    ])
    implementation (name:'neurotec-biometrics-gui-android', ext:'aar')
    implementation (name:'neurotec-licensing-gui-android', ext:'aar')



    //To include ndf databases that are needed for the neurotec sample Activities
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetect45.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetect90.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetect180.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetectSegmentsAttributes.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetectSegmentsOrientation.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetectSegmentsOrientation90.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetectSegmentsFeaturePointsTrack.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetectSegmentsLiveness.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesCreateTemplateSmall.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesCreateTemplateMedium.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesDetectSegmentsFeaturePointsDetect.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['FacesCreateTemplateQuality.ndf'])
//    implementation fileTree(dir: '../libs/ndfs', include: ['Fingers.ndf'])




    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

//To copy the libs of dependent projects to its own
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}
// To detect the aars in the parent folder
repositories {
    flatDir {
        dirs '../libs'  // Pointing to the parent libs directory
    }
}